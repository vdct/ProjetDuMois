//- Meta
meta(charset="UTF-8")
meta(name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no")
title Projet du mois.fr
meta(name="description" content="Projet du mois.fr est le tableau de bord de la communauté OpenStreetMap en France pour ses actions mensuelles d'amélioration des données")
meta(name="twitter:site" content="@projetdumois")
meta(name="twitter:card" content="summary_large_image")
meta(property="og:type" content="website")
meta(property="og:url" content="https://projetdumois.fr")
meta(property="og:title" content="Projet du mois.fr")
meta(property="og:description" content="Projet du mois.fr est le tableau de bord de la communauté OpenStreetMap en France pour ses actions mensuelles d'amélioration des données")
meta(property="og:image" content="https://projetdumois.fr/images/header.png")
meta(rel="canonical" href="https://projetdumois.fr")

link(rel="manifest" href="/manifest.webmanifest")
link(rel="icon" href="/images/favicon.png")

//- CSS
link(rel="stylesheet" type="text/css" href="/lib/bootstrap/bootstrap.css")
link(rel="stylesheet" type="text/css" href="/lib/mapbox-gl/mapbox-gl.css")
link(rel="stylesheet" type="text/css" href="/lib/chart.js/chart.css")
link(rel="stylesheet" type="text/css" href="/lib/fontawesome/css/all.min.css")
style
	include ../style.css

//- JS
script(src="/lib/bootstrap.native/bootstrap.js")
script(src="/lib/chart.js/chart.js")
script(src="/lib/osm-auth/osmauth.js")
script(src="/lib/osm-request/osmrequest.js")

include ../components/user_button

//- Auth and Matomo handlers (runs on client)
if CONFIG
	if CONFIG.MATOMO_HOST
		script.
			var _paq = window._paq = window._paq || [];
			_paq.push(['trackPageView']);
			_paq.push(['enableLinkTracking']);
			(function() {
				var u="#{CONFIG.MATOMO_HOST}";
				_paq.push(['setTrackerUrl', u+'matomo.php']);
				_paq.push(['setSiteId', '#{CONFIG.MATOMO_SITE}']);
				var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
				g.async=true; g.src=u+'matomo.js'; s.parentNode.insertBefore(g,s);
			})();

	script.
		Chart.defaults.global.defaultFontSize = 15;

		const osmApi = new OsmRequest({
			endpoint: "#{CONFIG.OSM_URL}",
			oauthConsumerKey: "#{CONFIG.OSM_API_KEY}",
			oauthSecret: "#{CONFIG.OSM_API_SECRET}"
		});

		const authOpts = {
			url: "#{CONFIG.OSM_URL}",
			oauth_consumer_key: "#{CONFIG.OSM_API_KEY}",
			oauth_secret: "#{CONFIG.OSM_API_SECRET}",
			landing: window.location.href.replace(window.location.search, ""),
			singlepage: true
		};
		const auth = osmAuth(authOpts);
		let authWait;

		const params = new URLSearchParams((window.location.search || "?").substring(1));
		const token = params.get("oauth_token") || localStorage.getItem("oauth_token") || null;

		function checkAuth() {
			if(auth.authenticated()) {
				if(authWait) {
					clearInterval(authWait);
				}

				//Get user details
				auth.xhr({
					method: 'GET',
					path: '/api/0.6/user/details'
				}, (err, details) => {
					if(err) {
						console.log(err);
						logout();
					}
					else {
						try {
							window.osm_user = {
								id: details.firstChild.childNodes[1].attributes.id.value,
								name: details.firstChild.childNodes[1].attributes.display_name.value,
								auth: auth
							};

							osmApi._auth = auth;
							window.dispatchEvent(new Event("osm_login"));
						}
						catch(e) {
							console.error(e);
							logout();
						}
					}
				});
			}
		}

		function login() {
			authOpts.landing = window.location.href + window.location.hash;
			auth.options(authOpts);

			if(!auth.authenticated()) {
				auth.authenticate((err, res) => {
					if(err) {
						console.error(err);
						alert("#{__("Une erreur s'est produite à la connexion, veuillez réessayer")}");
						logout();
					}
					else {
						checkAuth();
					}
				});
			}
		}

		function logout() {
			if(auth && auth.authenticated()) {
				auth.logout();
			}

			window.osm_user = null;
			osmApi._auth = null;
			localStorage.removeItem("oauth_token");
			window.dispatchEvent(new Event("osm_logout"));
		}

		window.addEventListener("load", () => {
			if(token) {
				auth.bootstrapToken(token, () => {
					checkAuth();
					window.history.replaceState(null, null, window.location.href.replace(window.location.search, ""));
					localStorage.setItem("oauth_token", token);
				});
			}
			else {
				//Check if we receive auth token
				checkAuth();
				authWait = setInterval(checkAuth.bind(this), 100);
			}
		});
