if editors.pdm
	h5(style="font-size: 1.1rem")= editors.pdm.title.add

form#pdm-editor-form
	if editors.pdm && editors.pdm.fields
		div.alert.alert-info#pdm-editor-mode

		button#pdm-edit-position.btn.btn-secondary.btn-block.mb-2.d-none(type="button")
			i.fa.fa-map-marked.mr-2
			| #{__("Modifier la position")}

		each field in editors.pdm.fields
			if field.type !== "hidden"
				div.form-group
					label(for=`pdm-editor_${field.tag}`)= field.name
						if field.help
							a(class="badge badge-pill text-light ml-2 bg-info ml-2" href=field.help target="_blank") ?

					if ["text", "number", "email"].includes(field.type)
						input.form-control(id=`pdm-editor_${field.tag}` name=field.tag type=field.type required=(!field.optional || false))
					else if field.type === "textarea"
						textarea.form-control(id=`pdm-editor_${field.tag}` rows="3" name=field.tag required=(!field.optional || false))
					else if field.type === "select"
						select.form-control(id=`pdm-editor_${field.tag}` name=field.tag required=(!field.optional || false))
							option(value="")
							each kv in field.values
								option(value=(kv.v || JSON.stringify(kv.tags)))= kv.l
					else if field.type === "2states"
						div
							div.form-check.form-check-inline
								input.form-check-input(type="radio" name=field.tag value="yes" id=`pdm-editor_${field.tag}_yes` required=(!field.optional || false))
								label.form-check-label(for=`pdm-editor_${field.tag}_yes`) Oui
							div.form-check.form-check-inline
								input.form-check-input(type="radio" name=field.tag value="" id=`pdm-editor_${field.tag}_unknown` checked required=(!field.optional || false))
								label.form-check-label(for=`pdm-editor_${field.tag}_unknown`) Ne sais pas
					else if field.type === "3states"
						div
							div.form-check.form-check-inline
								input.form-check-input(type="radio" name=field.tag value="yes" id=`pdm-editor_${field.tag}_yes` required=(!field.optional || false))
								label.form-check-label(for=`pdm-editor_${field.tag}_yes`)= __("Oui")
							div.form-check.form-check-inline
								input.form-check-input(type="radio" name=field.tag value="no" id=`pdm-editor_${field.tag}_no` required=(!field.optional || false))
								label.form-check-label(for=`pdm-editor_${field.tag}_no`)= __("Non")
							div.form-check.form-check-inline
								input.form-check-input(type="radio" name=field.tag value="" id=`pdm-editor_${field.tag}_unknown` checked required=(!field.optional || false))
								label.form-check-label(for=`pdm-editor_${field.tag}_unknown`)= __("Ne sais pas")
					else if field.type === "icons"
						div.container
							div.row.mx-n4.mb-n2.align-items-center
								each icon, id in field.values
									div.px-2.mb-2.col-4
										div.custom-control.custom-checkbox.image-checkbox
											input.custom-control-input(type="checkbox" value=JSON.stringify(icon.tags) id=`pdm-editor_${field.tag}_${id}`)
											label.custom-control-label(for=`pdm-editor_${field.tag}_${id}` title=icon.label)
												img.img-fluid(src=`/images/form/${icon.icon}.png`)
												p= icon.label

					if field.description
						small.form-text.text-muted= field.description

		div.btn-group.btn-block(role="group")
			button#pdm-editor-submit.btn.btn-success.w-50(type="submit" title=__("Envoyer les informations sur OpenStreetMap"))
			button#pdm-editor-cancel.btn.btn-warning.w-50(type="button" title=__("Retourner à la carte sans envoyer à OpenStreetMap"))
				i.fa.fa-ban.mr-2
				| #{__("Annuler")}

form#pdm-editor-note.d-none
	div.alert.alert-info= __("La création de notes de carte est à réserver aux cas ambigus, si la situation est claire préférez un autre mode d'édition.")
	div.form-group
		label(for="pdm-editor-note-txt")= __("Commentaire")
		textarea.form-control(name="note" rows="3" required=true)
	div.btn-group.btn-block(role="group")
		button.btn.btn-success.w-50(type="submit" title=__("Envoyer le commentaire de carte sur OpenStreetMap"))
			i.fa.fa-plus.mr-2
			| #{__("Créer")}
		button#pdm-editor-note-cancel.btn.btn-warning.w-50(type="button" title=__("Retourner à la carte sans envoyer à OpenStreetMap"))
			i.fa.fa-ban.mr-2
			| #{__("Annuler")}

div#pdm-editor-wait.text-center.d-none
	span.spinner-border.text-primary(role="status" style="width: 5rem; height: 5rem;")
	p.text-muted= __("Envoi en cours, veuillez patienter")

div#pdm-editor-done.d-none
	p= __("Votre contribution a bien été prise en compte, merci pour votre participation !")
	button#pdm-editor-done-btnmap.btn.btn-outline-primary.btn-block.d-md-none(type="button")= __("Retour à la carte")
	button#pdm-editor-done-btnok.btn.btn-outline-primary.btn-block.d-none.d-md-block(type="button")= __("OK")

script.
	const editorModeDom = document.getElementById("pdm-editor-mode");
	const editorFormDom = document.getElementById("pdm-editor-form");
	const editorNoteDom = document.getElementById("pdm-editor-note");
	const editorWaitDom = document.getElementById("pdm-editor-wait");
	const editorDoneDom = document.getElementById("pdm-editor-done");
	const editorMoveButton = document.getElementById("pdm-edit-position");
	const editorSubmitButton = document.getElementById("pdm-editor-submit");
	let currentEditorData = null;


	//
	// General functions
	//

	// Show proper editing mode (note or feature)
	function showEditingMode() {
		if(editorModeDom) {
			if(window.osm_user) { editorModeDom.innerHTML = "#{__("Vous êtes connecté : ce formulaire va éditer directement OpenStreetMap")}"; }
			else { editorModeDom.innerHTML = "#{__("Vous n'êtes pas connecté : ce formulaire va créer une note dans OpenStreetMap")}"; }
		}
	}

	// Show prompt before leaving page
	function askBeforeUnload(e) {
		e.preventDefault();
		e.returnValue = "#{__("Si vous quittez la page, les modifications en cours seront perdues.")}";
		return e.returnValue;
	}

	showEditingMode();
	window.addEventListener("osm_login", showEditingMode);
	window.addEventListener("osm_logout", showEditingMode);

	// Check if an OSM feature tags matches pattern PdM tags
	function checkFeatureMatchesPatternTags(osmTags, pdmKey, pdmPattern) {
		if(typeof pdmPattern !== "object") {
			return false;
		}

		return pdmPattern.valid.filter(valid => {
			// Special values
			if(valid.startsWith("<")) {
				if(valid === "<POS_INT>") {
					return !isNaN(parseInt(osmTags[pdmKey])) && parseInt(osmTags[pdmKey]) > 0;
				}
				else {
					return false;
				}
			}
			// Classic string
			else {
				return osmTags[pdmKey] === valid;
			}
		}).length > 0;
	}

	// Load form with existing tags
	function loadForm() {
		editorFormDom.reset();

		// Prefill form with optional tags
		if(currentEditorData.tags) {
			Object.entries(currentEditorData.tags).forEach(e => {
				if(editorFormDom.elements[e[0]]) {
					editorFormDom.elements[e[0]].value = e[1];
				}
			});

			// Auto-select appropriate entry in select with multiple tags
			if(editors.pdm && editors.pdm.fields && editors.pdm.fields.find(fld => ["select", "icons"].includes(fld.type) && fld.tag.startsWith("_"))) {
				editors.pdm.fields.filter(fld => ["select", "icons"].includes(fld.type) && fld.tag.startsWith("_"))
				.forEach(field => {
					// Read each response for this field
					for(let i = 0; i < field.values.length; i++) {
						let v = field.values[i];

						// Check if all tags in this response match feature
						let hasAllTags = true;
						for(let k in v.tags) {
							// This tag has several input allowed values
							if(typeof v.tags[k] === "object" && !checkFeatureMatchesPatternTags(currentEditorData.tags, k, v.tags[k])) {
								hasAllTags = false;
								break;
							}
							// This tag has a single classic allowed value
							else if(typeof v.tags[k] === "string" && currentEditorData.tags[k] !== v.tags[k] && (v.tags[k] !== "" || currentEditorData.tags[k] !== undefined)) {
								hasAllTags = false;
								break;
							}
						}

						// If matching, make this response as field value
						if(hasAllTags) {
							if(field.type === "select") {
								editorFormDom.elements[field.tag].value = JSON.stringify(v.tags);
								break;
							}
							else if(field.type === "icons") {
								editorFormDom.elements[`pdm-editor_${field.tag}_${i}`].checked = true;
							}
						}
					}
				});
			}
		}

		editorFormDom.classList.remove("d-none");
		editorNoteDom.classList.add("d-none");
		editorWaitDom.classList.add("d-none");
		editorDoneDom.classList.add("d-none");
		window.onbeforeunload = askBeforeUnload;
		window.dispatchEvent(new CustomEvent("pdm_sidebar_use", { detail: { panel: "editor", open: true } }));
	}

	// Reset map and sidebar on cancel / done
	function cancelEdit(close = true, keepPanel = false) {
		currentEditorData = null;
		showMarker();
		window.onbeforeunload = null;
		if(!keepPanel) {
			window.dispatchEvent(new CustomEvent("pdm_sidebar_use", { detail: { panel: "default", close } }));
		}
	}
	window.addEventListener("osm_logout", cancelEdit);

	if(editorModeDom) {
		document.getElementById("pdm-editor-note-cancel").addEventListener("click", cancelEdit);
		document.getElementById("pdm-editor-cancel").addEventListener("click", cancelEdit);
		document.getElementById("pdm-editor-done-btnmap").addEventListener("click", cancelEdit);
		document.getElementById("pdm-editor-done-btnok").addEventListener("click", e => cancelEdit(false));
	}



	//
	// Creating a feature
	//

	// First editing step : ask location on map
	// Options can be used to pre-fill tags and close note/osmose issue
	function onStartNewFeature(options = {}) {
		window.dispatchEvent(new CustomEvent("pdm_sidebar_use", { detail: { close: "noCancelLoc" } }));
		currentEditorData = options;
		currentEditorData.mode = "add";
		if(currentEditorData.coordinates || currentEditorData.originalCoordinates) {
			map.setCenter(currentEditorData.coordinates || currentEditorData.originalCoordinates);
		}
		askFeatureLocation(onNewFeatureLocated);
	}

	// Second step : once located, ask for details
	function onNewFeatureLocated(coordinates) {
		currentEditorData.coordinates = coordinates;
		currentEditorData.usedZoom = map.getZoom();
		editorMoveButton.classList.add("d-none");
		editorSubmitButton.innerHTML = `<i class="fa fa-plus mr-2"></i> #{__("Créer")}`;
		loadForm();
		editorFormDom.addEventListener("submit", onFeatureFormSubmit);
		setTimeout(() => showMarker(coordinates), 500);
	}


	//
	// Edit an existing feature
	//

	// Start
	function onStartEditFeature(options = {}) {
		if(!options.osmid) { cancelEdit(); }

		currentEditorData = options;
		currentEditorData.mode = "edit";
		editorMoveButton.classList.add("d-none");
		editorSubmitButton.innerHTML = `<i class="fa fa-check mr-2"></i> #{__("Valider")}`;
		loadForm();
		editorFormDom.addEventListener("submit", onFeatureFormSubmit);

		if(currentEditorData.coordinates || currentEditorData.originalCoordinates) {
			setTimeout(() => showMarker(currentEditorData.coordinates || currentEditorData.originalCoordinates), 500);
		}

		// Check if feature position could be edited
		if(currentEditorData.osmid.startsWith("node/")) {
			try {
				osmApi.fetchWaysForNode(currentEditorData.osmid)
				.then(ways => {
					if(!ways || ways.length === 0) {
						editorMoveButton.classList.remove("d-none");
					}
				});
			}
			catch(e) {
				console.error(e);
			}
		}
	}

	// Change coordinates
	function onEditedFeatureMoved(coordinates) {
		currentEditorData.coordinates = coordinates;
		currentEditorData.usedZoom = map.getZoom();
		window.dispatchEvent(new CustomEvent("pdm_sidebar_use", { detail: { panel: "editor", open: true } }));
		setTimeout(() => showMarker(coordinates), 500);
	}

	if(editorModeDom) {
		editorMoveButton.addEventListener("click", e => {
			window.onbeforeunload = null;
			if(currentEditorData.coordinates || currentEditorData.originalCoordinates) {
				map.setCenter(currentEditorData.coordinates || currentEditorData.originalCoordinates);
			}
			window.dispatchEvent(new CustomEvent("pdm_sidebar_use", { detail: { close: "noCancelLoc" } }));
			askFeatureLocation(onEditedFeatureMoved);
		});
	}

	// Check and send to OSM
	function onFeatureFormSubmit(e) {
		e.preventDefault();
		showMarker();
		const formData = Object.fromEntries([...new FormData(e.target)].filter(kv => kv[0] && !kv[0].startsWith("_") && kv[1] && kv[1].toString().trim() !== ""));

		let emptyTags = Object.fromEntries([...new FormData(e.target)].filter(kv => kv[0] && kv[0].toString().trim() !== "" && !kv[0].startsWith("_") && !kv[1] || kv[1].trim() === ""));

		const fixedTags = Object.fromEntries(
			editors.pdm.fields
			.filter(f => f.type === "hidden")
			.map(f => Object.entries(f.tags))
			.flat()
			.map(e => e[1] === "*" && currentEditorData.tags && currentEditorData.tags[e[0]] ? [e[0], currentEditorData.tags[e[0]]] : e)
			.filter(e => e[1] !== "*")
		);

		let multiselectTags = {};
		let tagsToEventuallyUpdate = {};
		[...new FormData(e.target)].filter(kv => kv[0] && kv[0].startsWith("_") && kv[1] && kv[1].toString().trim() !== "").forEach(e => {
			Object.entries(JSON.parse(e[1])).forEach(mste => {
				if(mste[0] && mste[0].toString().trim() !== "" && (!mste[1] || mste[1].trim() === "")) {
					emptyTags[mste[0]] = "";
				}
				else {
					if(typeof mste[1] === "string") {
						multiselectTags[mste[0]] = mste[1];
					}
					else if(typeof mste[1] === "object") {
						tagsToEventuallyUpdate = mste[1];
					}
				}
			});
		});

		// Values from checkbox, which aren't handled by FormData object
		for(let input of e.target.elements) {
			if(input.type == "checkbox") {
				Object.entries(JSON.parse(input.value)).forEach(cbt => {
					if(input.checked) {
						if(typeof cbt[1] === "string") {
							multiselectTags[cbt[0]] = cbt[1];
						}
						else if(typeof cbt[1] === "object") {
							tagsToEventuallyUpdate[cbt[0]] = cbt[1];
						}
					}
					else {
						emptyTags[cbt[0]] = "";
					}
				});
			}
		}

		const tagsToApply = Object.assign(
			{},
			fixedTags, formData, multiselectTags,
			currentEditorData.usedZoom < 16 ? { fixme: "Position approximative" } : {}
		);

		// Add default values for tags to eventually update if new feature is created
		if(currentEditorData && currentEditorData.mode === "add") {
			Object.entries(tagsToEventuallyUpdate).forEach(tteu => {
				tagsToApply[tteu[0]] = tteu[1].user_defined;
			});
		}

		// Remove from tagsToApply the emptyTags
		Object.keys(emptyTags).forEach(k => delete tagsToApply[k]);

		if(osmApi && currentEditorData && Object.keys(tagsToApply).length > 0) {
			// Show wait message
			editorFormDom.classList.add("d-none");
			editorNoteDom.classList.add("d-none");
			editorWaitDom.classList.remove("d-none");
			editorDoneDom.classList.add("d-none");

			// Handle as new/existing OSM feature
			if(window.osm_user && window.osm_user.id && window.osm_user.auth) {
				// Look for changeset (either reuse existing or create new one)
				let changesetId = localStorage.getItem("changeset_#{id}");
				let getChangeset;

				const getChangesetPromise = () => osmApi.createChangeset('ProjetDuMois.fr', editors.all.comment, {
					host: window.location.toString().split("#")[0],
					locale: navigator.languages ? navigator.languages[0] : navigator.language,
					hashtags: editors.all.hashtags.split(",").map(h => "#"+h).join(";")
				}).then(res => {
					changesetId = res;
					localStorage.setItem("changeset_#{id}", changesetId);
					return true;
				});

				if(changesetId && !isNaN(parseInt(changesetId))) {
					getChangeset = osmApi.isChangesetStillOpen(changesetId)
					.then(res => {
						if(!isNaN(res)) { return true; }
						else { throw new Error("Not opened"); }
					})
					.catch(e => {
						return getChangesetPromise();
					});
				}
				else {
					getChangeset = getChangesetPromise();
				}

				getChangeset
				.then(() => {
					const onceDone = () => {
						editorFormDom.classList.add("d-none");
						editorNoteDom.classList.add("d-none");
						editorWaitDom.classList.add("d-none");
						editorDoneDom.classList.remove("d-none");
						new maplibregl.Marker({ color: "#2E7D32" }).setLngLat(currentEditorData.coordinates || currentEditorData.originalCoordinates).addTo(map);

						if(currentEditorData.onInternalEdit) {
							currentEditorData.onInternalEdit();
						}

						addContribution(currentEditorData.mode);
						cancelEdit(false, true);
					};

					if(currentEditorData.mode === "add" && currentEditorData.coordinates.lat && currentEditorData.coordinates.lng) {
						return osmApi.sendElement(
							osmApi.createNodeElement(currentEditorData.coordinates.lat, currentEditorData.coordinates.lng, tagsToApply),
							changesetId
						)
						.then(onceDone);
					}
					else if(currentEditorData.mode === "edit") {
						return osmApi.fetchElement(currentEditorData.osmid).then(element => {
							// Update coordinates
							if(currentEditorData.coordinates) {
								element = osmApi.setCoordinates(element, currentEditorData.coordinates.lat, currentEditorData.coordinates.lng);
							}

							// Remove empty tags
							if(Object.keys(emptyTags).length > 0) {
								Object.keys(emptyTags).forEach(k => { element = osmApi.removeTag(element, k); });
							}

							// Set new tags
							element = osmApi.setTags(element, tagsToApply);

							// Update if necessary tags to eventually update
							Object.entries(tagsToEventuallyUpdate).forEach(tteu => {
								const osmExistingValue = currentEditorData.tags[tteu[0]];
								if(!checkFeatureMatchesPatternTags(currentEditorData.tags, tteu[0], tteu[1])) {
									element = osmApi.setTag(element, tteu[0], tteu[1].user_defined);
								}
							});

							// Send to OSM
							return osmApi.sendElement(element, changesetId)
							.then(onceDone);
						});
					}
					else {
						alert("#{__("Des données sont manquantes, merci de réessayer")}");
						onStartNewFeature();
					}
				})
				.catch(e => {
					console.error(e);
					alert("#{__("Une erreur s'est produite, merci de réessayer plus tard")}");
					cancelEdit();
				});
			}
			// Handle as anonymous note
			else {
				const noteText = `${editors.all.comment}\n\n${currentEditorData.osmid ? `#{__("Objet concerné :")} ${currentEditorData.osmid}\n`: ""}#{__("Attributs renseignés :")}\n${Object.entries(tagsToApply).map(e => e.join("=")).join("\n")}\n\n#{__("Plus d'infos sur la résolution de cette note")} : #{links.osmwiki}\nVia ProjetDuMois.fr ${editors.all.hashtags.split(",").map(h => "#"+h).join(" ")}`;

				osmApi._auth = { skip: true };
				const coords = currentEditorData.coordinates || currentEditorData.originalCoordinates;
				if(coords) {
					osmApi.createNote(coords.lat, coords.lng, noteText)
					.then(() => {
						editorFormDom.classList.add("d-none");
						editorNoteDom.classList.add("d-none");
						editorWaitDom.classList.add("d-none");
						editorDoneDom.classList.remove("d-none");
						loadNotesOnMap();
						cancelEdit(false, true);
						addContribution('add');
					})
					.catch(e => {
						console.error(e);
						alert("#{__("Une erreur s'est produite, merci de réessayer plus tard")}");
						cancelEdit();
					});
				}
				else {
					alert("#{__("Des données sont manquantes, merci de réessayer")}");
					onStartNewFeature();
				}
			}
		}
		else {
			alert("#{__("Des données sont manquantes, merci de réessayer")}");
			onStartNewFeature();
		}
	}


	//
	// Create a comment note
	//

	// Start
	function onStartTextNote(options = {}) {
		currentEditorData = options;
		if(options.coordinates || options.originalCoordinates) { map.setCenter(options.coordinates || options.originalCoordinates); }
		window.dispatchEvent(new CustomEvent("pdm_sidebar_use", { detail: { close: "noCancelLoc" } }));
		askFeatureLocation(onNewNoteLocated);
	}

	// After asking for coordinates, display form
	// Second step : once located, ask for details
	function onNewNoteLocated(coordinates) {
		currentEditorData.coordinates = coordinates;
		currentEditorData.usedZoom = map.getZoom();
		editorNoteDom.reset();
		editorNoteDom.addEventListener("submit", onNoteFormSubmit);
		editorNoteDom.classList.remove("d-none");
		editorFormDom.classList.add("d-none");
		editorWaitDom.classList.add("d-none");
		editorDoneDom.classList.add("d-none");
		window.onbeforeunload = askBeforeUnload;
		window.dispatchEvent(new CustomEvent("pdm_sidebar_use", { detail: { panel: "editor", open: true } }));
		setTimeout(() => showMarker(coordinates), 500);
	}

	// Saving note
	function onNoteFormSubmit(e) {
		e.preventDefault();
		showMarker();

		let noteText = new FormData(e.target).get("note");

		if(osmApi && currentEditorData && currentEditorData.coordinates.lat && currentEditorData.coordinates.lng && typeof noteText === "string" && noteText.trim().length > 0) {
			// Show wait message
			editorFormDom.classList.add("d-none");
			editorNoteDom.classList.add("d-none");
			editorWaitDom.classList.remove("d-none");
			editorDoneDom.classList.add("d-none");

			noteText += `\nVia ProjetDuMois.fr ${editors.all.hashtags.split(",").map(h => "#"+h).join(" ")}`;

			if(!window.osm_user || !window.osm_user.id || !window.osm_user.auth) {
				osmApi._auth = { skip: true };
			}

			osmApi.createNote(currentEditorData.coordinates.lat, currentEditorData.coordinates.lng, noteText)
			.then(() => {
				editorFormDom.classList.add("d-none");
				editorNoteDom.classList.add("d-none");
				editorWaitDom.classList.add("d-none");
				editorDoneDom.classList.remove("d-none");
				loadNotesOnMap();
				cancelEdit(false, true);
				addContribution('note');
			})
			.catch(e => {
				console.error(e);
				alert("#{__("Une erreur s'est produite, merci de réessayer plus tard")}");
				cancelEdit();
			});
		}
	}
