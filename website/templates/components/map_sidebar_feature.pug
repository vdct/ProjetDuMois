script.
	const osmSources = !{JSON.stringify(datasources.filter(ds => ds.source === "osm"))};
	const osmCompareSources = !{JSON.stringify(datasources.filter(ds => ["osm-compare", "osm-extra"].includes(ds.source)))};
	const editors = !{JSON.stringify(editors)};
	const tagToUrl = !{JSON.stringify(tagToUrl)};

include edit_button.pug

script.
	// Mark as done/false in Osmose
	const filteredUuids = [];
	function markOsmose(type, feature, skipContrib = false) {
		const uuid = feature.properties.uuid;
		return () => {
			// Send to Osmose
			fetch(`#{CONFIG.OSMOSE_URL}/api/0.3/issue/${uuid}/${type}`);

			// Hide feature on map
			showMarker();
			if(type === "done") {
				if(!skipContrib) {
					addContribution('add');
				}
			}
			else {
				window.dispatchEvent(new CustomEvent("pdm_sidebar_use", { detail: { close: true } }));
			}
			filteredUuids.push(uuid);
			map.setFilter(feature.layer.id, ["!", ["in", ["get", "uuid"], ["literal", filteredUuids]]]);
		};
	}

	// Close note on OSM
	function closeNote(p) {
		if(window.osm_user && osmApi) {
			osmApi.closeNote(p.id, "#{__("Marqué comme résolu dans le cadre du projet du mois (via projetdumois.fr)")}")
			.then(() => {
				const source = map.getSource(`notes_${p.pdm_note_source}`);
				const notes = source._data;
				notes.features = notes.features.filter(f => f.properties.id !== p.id);
				source.setData(notes);
				showMarker();
				addContribution('add');
			})
			.catch(e => {
				alert("#{__("Une erreur s'est produite lors de la modification de la note")}");
				console.error(e);
			});
		}
	}

	// Mark OSM compare feature as ignored
	const filteredOsmIds = [];
	function ignoreOsmCompare(f) {
		fetch(`/projects/#{id}/ignore/${f.properties.osm_id}?${window.osm_user ? "user_id="+window.osm_user.id : ""}`, { method: "POST" })
		.then(() => {
			window.dispatchEvent(new CustomEvent("pdm_sidebar_use", { detail: { close: true } }));
			filteredOsmIds.push(f.properties.osm_id);
			map.setFilter(f.layer.id, ["!", ["in", ["get", "osm_id"], ["literal", filteredOsmIds]]]);
		})
		.catch(e => {
			alert("#{__("Une erreur s'est produite lors de l'enregistrement, merci de réessayer plus tard")}");
			console.error(e);
		});
	}

	// Create DOM structure for features tags following form
	function getReadableTags(container, tags, rawTagsLabel = null) {
		if(rawTagsLabel || !editors.pdm || !editors.pdm.fields) {
			const div = document.createElement("div");
			div.classList.add("form-group", "m-0", "mb-1");

			const label = document.createElement("label");
			label.classList.add("m-0", "text-muted");
			label.appendChild(document.createTextNode(rawTagsLabel || "#{__("Attributs")}"));
			div.appendChild(label);

			const tagsContainer = document.createElement("table");
			tagsContainer.classList.add("table", "table-sm", "table-striped", "table-bordered", "m-0");
			tagsContainer.style.fontSize = "1.0rem";
			tagsContainer.appendChild(document.createElement("tbody"));
			Object.entries(tags).forEach(te => {
				const row = document.createElement("tr");
				const td1 = document.createElement("td");
				const td2 = document.createElement("td");

				const l1 = document.createElement("a");
				l1.href = "https://wiki.openstreetmap.org/wiki/Key:"+te[0];
				l1.target = "_blank";
				l1.appendChild(document.createTextNode(te[0]));
				td1.appendChild(l1);

				if(tagToUrl[te[0]]) {
					if(typeof tagToUrl[te[0]] === "string") {
						const l2 = document.createElement("a");
						l2.href = tagToUrl[te[0]].replace(/\$1/g, te[1]);
						l2.target = "_blank";
						l2.appendChild(document.createTextNode(te[1]));
						td2.appendChild(l2);
					}
					else if(Array.isArray(tagToUrl[te[0]])) {
						td2.appendChild(document.createTextNode(te[1]));
						const sup = document.createElement("sup");
						sup.appendChild(document.createTextNode("["));
						tagToUrl[te[0]].forEach((tv, i) => {
							if(i > 0) {
								sup.appendChild(document.createTextNode(","));
							}
							const l2 = document.createElement("a");
							l2.href = tv.replace(/\$1/g, te[1]);
							l2.target = "_blank";
							l2.appendChild(document.createTextNode(i+1));
							sup.appendChild(l2);
						});
						sup.appendChild(document.createTextNode("]"));
						td2.appendChild(sup);
					}
				}
				else {
					td2.appendChild(document.createTextNode(te[1]));
				}

				row.appendChild(td1);
				row.appendChild(td2);
				tagsContainer.firstChild.appendChild(row);
			});

			const tagsContainerCtn = document.createElement("div");
			tagsContainerCtn.classList.add("table-responsive");
			tagsContainerCtn.appendChild(tagsContainer);
			div.appendChild(tagsContainerCtn);

			container.appendChild(div);
		}
		else {
			const div = document.createElement("div");
			const toComplete = [];
			let editorTags = [];

			for(let field of editors.pdm.fields) {
				if(field.type !== "hidden") {
					if(field.tag && !field.tag.startsWith("_")) { editorTags.push(field.tag); }
					else if(field.tags) { editorTags = editorTags.concat(Object.keys(field.tags)); }

					if(tags[field.tag]) {
						const p = document.createElement("p");
						p.classList.add("mb-1");

						const title = document.createElement("div");
						title.classList.add("text-muted");
						title.appendChild(document.createTextNode(field.name));

						if (field.hasOwnProperty("help")){
							helpBadge = document.createElement("a");
							helpBadge.className = "badge badge-pill text-light ml-2 bg-info";
							helpBadge.href = field.help;
							helpBadge.title = "#{__("Plus d'infos sur ce champ")}";
							helpBadge.target = "_blank";
							helpBadge.appendChild(document.createTextNode("?"));
							title.appendChild(helpBadge);
						}

						p.appendChild(title);

						let valueText = tags[field.tag];
						if(field.type === "select" && field.values.find(v => v.v === tags[field.tag])) {
							valueText = field.values.find(v => v.v === tags[field.tag]).l;
						}
						else if(field.type === "2states" && tags[field.tag] === "yes") {
							valueText = "Oui";
						}
						else if(field.type === "3states" && ["yes", "no"].includes(tags[field.tag])) {
							valueText = tags[field.tag] === "yes" ? "#{__("Oui")}" : "#{__("Non")}";
						}

						const value = document.createElement("span");
						value.classList.add("d-block");
						value.appendChild(document.createTextNode(valueText));
						p.appendChild(value);

						div.appendChild(p);
					}
					else if(field.tag.startsWith("_")) {
						// Check if value is found in tags
						let foundValues = [];
						for(let v of field.values) {
							let tagsMatch = true;
							for(let k in v.tags) {
								if(typeof v.tags[k] === "object") {
									if(!checkFeatureMatchesPatternTags(tags, k, v.tags[k])) {
										tagsMatch = false;
										break;
									}
								}
								else {
									if(tags[k] !== v.tags[k]) {
										tagsMatch = false;
										break;
									}
								}
							}

							if(tagsMatch) {
								foundValues.push(v);
								editorTags = editorTags.concat(Object.keys(v.tags));
							}
						}

						// If found, display
						if(foundValues.length > 0) {
							const p = document.createElement("p");
							p.classList.add("mb-1");

							const title = document.createElement("span");
							title.classList.add("text-muted", "d-block");
							title.appendChild(document.createTextNode(field.name));
							p.appendChild(title);

							if(field.type === "icons") {
								div.appendChild(p);

								const container = document.createElement("div");
								container.classList.add("container");

								const iconRow = document.createElement("div");
								iconRow.classList.add("row", "mx-n4", "mb-n2", "align-items-center");

								for(let fv of foundValues) {
									const fvDiv = document.createElement("div");
									fvDiv.classList.add("px-2", "mb-2", "col-4", "text-center");

									const fvLbl = document.createElement("small");
									fvLbl.appendChild(document.createTextNode(fv.label));
									fvDiv.appendChild(fvLbl);

									const fvImg = document.createElement("img");
									fvImg.classList.add("img-fluid");
									fvImg.style.height = "42px";
									fvImg.src = `/images/form/${fv.icon}.png`;
									fvDiv.appendChild(fvImg);

									iconRow.appendChild(fvDiv);
								}

								container.appendChild(iconRow);
								div.appendChild(container);
							}
							else {
								const value = document.createElement("span");
								value.classList.add("d-block");
								value.appendChild(document.createTextNode(foundValues.map(fv => fv.l || fv.label).join(", ")));
								p.appendChild(value);
								div.appendChild(p);
							}
						}
						else {
							toComplete.push(field.name);
						}
					}
					else if(field.tag !== "note") {
						toComplete.push(field.name);
					}
				}
			}

			container.appendChild(div);

			// Check if there are other tags to display as raw
			const leftTags = Object.keys(tags).filter(t => !editorTags.includes(t));
			if(leftTags.length > 0) {
				getReadableTags(container, Object.fromEntries(Object.entries(tags).filter(e => leftTags.includes(e[0]))), "#{__("Autres attributs")}" );
			}

			if(toComplete.length > 0) {
				const p = document.createElement("div");

				const title = document.createElement("span");
				title.classList.add("text-muted", "d-block");
				title.appendChild(document.createTextNode("#{__("Attributs à renseigner")}"));
				p.appendChild(title);

				const value = document.createElement("ul");
				value.classList.add("mb-1");
				value.style.paddingLeft = "1.5rem";
				toComplete.forEach(tc => {
					const tcd = document.createElement("li");
					tcd.appendChild(document.createTextNode(tc));
					value.appendChild(tcd);
				});
				p.appendChild(value);
				container.appendChild(p);
			}
		}
	}

	// Search for OSM feature in loaded data
	function getOSMFeatureFromMap(featureId) {
		if(!featureId) { return null; }
		else {
			for(let osmSourceId in osmSources) {
				const sourceId = "osm_"+osmSourceId;
				const features = map.querySourceFeatures(sourceId, { filter: ["==", ["get", "osm_id"], featureId], sourceLayer: `public.pdm_project_#{id.split("_").pop()}` });
				if(features.length >= 1) {
					return features.pop();
				}
			}
			return null;
		}
	}

	// Create DOM structure for feature description
	function getDescription(feature) {
		const s = feature.source;
		const p = feature.properties;
		const originalCoordinates = { lng: feature.geometry.coordinates[0], lat: feature.geometry.coordinates[1] };
		const resDiv = document.createElement("div");

		// Retrieve metadata on Osmose API
		if(s.startsWith("osmose_")) {
			const osmoseLabels = !{JSON.stringify(osmoseLabels)};
			const osmoseButtons = !{JSON.stringify(osmoseButtons)};

			resDiv.innerHTML = `<div class="d-flex align-items-center justify-content-center" style="height: 240px; width: 240px"><span class="spinner-border text-primary" role="status" style="width: 5rem; height: 5rem;"></span></div>`;

			fetch(`#{CONFIG.OSMOSE_URL}/api/0.3/issue/${p.uuid}`)
			.then(res => res.json())
			.then(meta => {
				const labels = Object.assign({ name: meta.title.auto }, osmoseLabels[`${meta.item}_all`], osmoseLabels[`${meta.item}_${meta.class}`]);
				const buttons = Object.assign({ done: "#{__("C'est fait")}", false: "#{__("Rien ici / déjà fait")}", add: "#{__("Intégrer cet objet")}" }, osmoseButtons[`${meta.item}_all`], osmoseButtons[`${meta.item}_${meta.class}`]);

				let tags = [];
				let tagsForEdit = {};
				if(
					meta.new_elems && meta.new_elems.length > 0
					&& meta.new_elems[0].add && meta.new_elems[0].add.length > 0
				) {
					tags = meta.new_elems[0].add;
				}
				else if(
					meta.elems && meta.elems.length > 0
					&& meta.elems[0].fixes && meta.elems[0].fixes.length > 0
					&& meta.elems[0].fixes[0].add && meta.elems[0].fixes[0].add.length > 0
				) {
					tags = meta.elems[0].fixes[0].add;
				}
				tags.forEach(kv => tagsForEdit[kv.k] = kv.v);

				const elem = meta.elems && meta.elems.length > 0 && meta.elems[0];
				const origOsmFeatureId = elem && elem.type+"/"+elem.id;
				const origOsmFeature = getOSMFeatureFromMap(origOsmFeatureId);
				if(origOsmFeature) {
					tagsForEdit = Object.assign(
						{},
						typeof origOsmFeature.properties.tags === "string" ? JSON.parse(origOsmFeature.properties.tags) : origOsmFeature.properties.tags,
						tagsForEdit
					);
				}

				let subtitle = meta.subtitle ? meta.subtitle.auto : "";
				if(labels.subtitles) {
					const subtitles = Object.keys(labels.subtitles).filter(s => subtitle.includes(s)).map(s => labels.subtitles[s]);
					if(subtitles.length > 0) { subtitle = subtitles[0]; }
					else if(labels.subtitles.fallback) { subtitle = labels.subtitles.fallback; }
				}

				resDiv.innerHTML = `
					<h5>${labels.name}</h5>
					${labels.description ? `<div class="alert alert-info">${labels.description}</div>` : ""}
					<p>${subtitle.replace(/\n/g, "<br />")}</p>`;

				if(tags.length > 0) {
					getReadableTags(resDiv, tagsForEdit);
				}

				const divButtons = document.createElement("div");
				divButtons.classList.add("btn-group", "btn-block", "mt-1");
				divButtons.role = "group";

				const divButtonDone = document.createElement("button");
				divButtonDone.classList.add("btn", "btn-success");
				divButtonDone.appendChild(document.createTextNode("✔ "+buttons.done));
				divButtonDone.title = "Marquer cet élément comme \""+buttons.done+"\" si vous avez ajouté/corrigé le point dans OpenStreetMap";
				divButtonDone.addEventListener("click", markOsmose("done", feature));

				const divButtonFalse = document.createElement("button");
				divButtonFalse.classList.add("btn", "btn-warning");
				divButtonFalse.appendChild(document.createTextNode("✘ "+buttons.false));
				divButtonFalse.title = "Marquer cet élément comme \""+buttons.false+"\" si le signalement n'est pas valide";
				divButtonFalse.addEventListener("click", markOsmose("false", feature));

				createFeatureButton(resDiv, origOsmFeature ? "edit" : "add", "btn-block mt-3 mb-1 dropup", {
					title: buttons[origOsmFeature ? "edit" : "add"],
					tags: tagsForEdit,
					osmid: origOsmFeature ? origOsmFeatureId : undefined,
					originalCoordinates: origOsmFeature ? { lng: origOsmFeature.geometry.coordinates[0], lat: origOsmFeature.geometry.coordinates[1] } : originalCoordinates,
					osmoseuuid: meta.uuid,
					onExternalEdit: editors.pdm ? () => divButtons.insertBefore(divButtonDone, divButtonFalse) : null,
					onInternalEdit: markOsmose("done", feature, true)
				});

				divButtons.appendChild(divButtonFalse);
				resDiv.appendChild(divButtons);
			});
		}
		// Notes from OSM
		else if(s.startsWith("notes_")) {
			const noteSource = notesSources[p.pdm_note_source];
			const buttons = Object.assign({ close: "C'est fait" }, noteSource.buttons);
			const cmts = typeof p.comments === "object" ? p.comments : JSON.parse(p.comments);
			const notesStatuses = { "opened": "#{__("Ouvert")}", "closed": "#{__("Fermé")}", "reopened": "#{__("Réouvert")}", "commented": "#{__("Commentaire")}" };

			resDiv.innerHTML = `
				<h5>${noteSource.name}</h5>
				<div class="alert alert-info">${noteSource.description}</div>
				${cmts.map((cmt, i) => `<div class="${i == cmts.length - 1 ? "" : "border-bottom"} pdm-note-comment pb-2 mb-2">
					<div class="text-muted" style="font-size: 0.9rem">
						${notesStatuses[cmt.action]} par ${cmt.user || "une personne anonyme"} le ${new Date(cmt.date.split(" ").slice(0, 2).join("T")).toLocaleString(navigator.language, { day: 'numeric', month: 'long', year: 'numeric' })}
					</div>
					${cmt.html}
				</div>`).join("")}`;

			createPicturesCarousel(resDiv, searchPicturesInNote({ properties: { comments: cmts } }), { classes: "mb-3" });

			let tags = {
				source: `#{CONFIG.OSM_URL}/note/${p.id}`
			};

			// Read tags from editor
			if(editors.pdm && editors.pdm.fields) {
				editors.pdm.fields.filter(fld => fld.type === "hidden").forEach(fld => {
					Object.entries(fld.tags).filter(e => e[1] !== "*").forEach(e => tags[e[0]] = e[1]);
				});
			}

			// Try to read tags out of comments
			let featureId = null;
			cmts.forEach(cmt => {
				cmt.text.split("\n").forEach(line => {
					const parts = line.split("=");
					if(parts.length >= 2) {
						const key = parts[0];
						const value = parts.slice(1).join("=");
						if(/^[a-zA-Z:_\-0-9]+$/.test(key.trim()) && value.trim().length > 0) {
							tags[key.trim()] = value.trim();
						}
					}
					// Check for OSM ID
					else {
						const found = line.match(/(node|way|relation)\/[0-9]+/);
						if(found) {
							featureId = found[0];
						}
					}
				});
			});

			const divButtons = document.createElement("div");
			divButtons.classList.add("btn-group", "btn-block", "mt-1");
			divButtons.role = "group";

			const divButtonDone = document.createElement("button");
			divButtonDone.classList.add("btn", "btn-success", "w-50");
			divButtonDone.appendChild(document.createTextNode("✔ "+buttons.close));
			divButtonDone.addEventListener("click", () => closeNote(p));
			const labelConnected = "Marquer cet élément comme \""+buttons.close+"\" si vous avez ajouté/corrigé le point dans OpenStreetMap";
			const labelDisconnected = "#{__("Vous devez être connecté pour marquer la note comme résolue.")}";
			if(!window.osm_user) {
				divButtonDone.setAttribute("disabled", "");
				divButtonDone.title = labelDisconnected;
			}
			else {
				divButtonDone.title = labelConnected;
			}

			window.addEventListener("osm_login", () => {
				divButtonDone.removeAttribute("disabled");
				divButtonDone.title = labelConnected;
			});
			window.addEventListener("osm_logout", () => {
				divButtonDone.setAttribute("disabled", "");
				divButtonDone.title = labelDisconnected;
			});

			const divButtonComment = document.createElement("a");
			divButtonComment.classList.add("btn", "btn-secondary", "w-50");
			divButtonComment.role = "button";
			divButtonComment.appendChild(document.createTextNode("💬 Commenter"));
			divButtonComment.title = "#{__("Participer à la discussion sur cette note")}";
			divButtonComment.href = `#{CONFIG.OSM_URL}/note/${p.id}`;
			divButtonComment.target = "_blank";

			const osmFeature = getOSMFeatureFromMap(featureId);
			if(osmFeature) {
				tags = Object.assign(
					{},
					typeof osmFeature.properties.tags === "string" ? JSON.parse(osmFeature.properties.tags) : osmFeature.properties.tags,
					tags
				);
			}

			createFeatureButton(resDiv, osmFeature ? "edit": "add", "btn-block mb-1 dropup", {
				noteid: "note/"+p.id,
				osmid: osmFeature ? featureId : undefined,
				originalCoordinates: osmFeature ? { lng: osmFeature.geometry.coordinates[0], lat: osmFeature.geometry.coordinates[1] } : originalCoordinates,
				tags,
				onExternalEdit: editors.pdm ? () => divButtons.insertBefore(divButtonDone, divButtonComment) : null,
				onInternalEdit: () => closeNote(p)
			});

			divButtons.appendChild(divButtonComment);
			resDiv.appendChild(divButtons);
		}
		// OSM features
		else if(s.startsWith("osm_")) {
			const tags = typeof p.tags === "string" ? JSON.parse(p.tags) : p.tags;
			const osmSource = osmSources[parseInt(feature.source.split("_")[1])];

			resDiv.innerHTML = `
				<h5>${p.name || tags.ref || osmSource.name}</h5>
				<div class="alert alert-info">${osmSource.description}</div>`;

			getReadableTags(resDiv, tags);
			createPicturesCarousel(resDiv, searchPicturesInOSMTags(tags), { classes: "mb-1" });

			createFeatureButton(resDiv, "edit", "btn-block mt-2 dropup", {
				osmid: p.osm_id,
				tags,
				originalCoordinates
			});
		}
		// OSM comparison features
		else if(s.startsWith("osm-compare_") || s.startsWith("osm-extra_")) {
			const tags = typeof p.tags === "string" ? JSON.parse(p.tags) : p.tags;
			const osmSource = osmCompareSources[parseInt(feature.source.split("_")[1])];

			resDiv.innerHTML = `
				<h5>${osmSource.name}</h5>
				<div class="alert alert-info">${osmSource.description}</div>
				${p.name || tags.ref ? `<p>${p.name || tags.ref}</p>` : ''}`;

			getReadableTags(resDiv, tags, "Attributs");

			if(s.startsWith("osm-compare_")) {
				createFeatureButton(resDiv, "add", "btn-block mt-2 dropup", { originalCoordinates });

				const divButtonFalse = document.createElement("button");
				divButtonFalse.classList.add("btn", "btn-warning", "btn-block", "mt-2");
				divButtonFalse.appendChild(document.createTextNode("✘ #{__("Rien ici / déjà fait")}"));
				divButtonFalse.title = "Marquer qu'il n'y a rien ici si vous n'avez pas vu de #{statistics.feature_name} sur le terrain";
				divButtonFalse.addEventListener("click", e => ignoreOsmCompare(feature));
				resDiv.appendChild(divButtonFalse);
			}
			else {
				createFeatureButton(resDiv, "info", "btn-block mt-2 dropup", {
					osmid: p.osm_id,
					tags,
					originalCoordinates
				});
			}
		}
		// Mapillary pictures
		else if(s.startsWith("background_") && p.sequence_id && p.id) {
			// Mapillary viewer
			const mlyDiv = document.createElement("div");
			mlyDiv.style.height = '350px';
			mlyDiv.style.width = '100%';
			const mly = new mapillary.Viewer({
				accessToken: "#{CONFIG.MAPILLARY_API_KEY}",
				container: mlyDiv,
				imageId: p.id,
				component: { cover: false }
			});

			// To avoid sizing issues
			mly.on("load", () => {
				mly.off("load", this);
				mly.resize();
			});

			// Update map marker position
			mly.on("image", e => {
				showMarker(e.image.lngLat);
			});

			// Fullscreen button
			const fullscreenBtn = document.createElement("button");
			fullscreenBtn.innerHTML = '<i class="fa fa-expand"></i>';
			fullscreenBtn.addEventListener("click", () => {
				if(document.fullscreenElement === mlyDiv) {
					mlyDiv.exitFullscreen();
				}
				else {
					mlyDiv.requestFullscreen();
				}
			});
			document.addEventListener("fullscreenchange", e => {
				if(mly) {
					mly.resize();
				}
			});
			fullscreenBtn.style.position = "absolute";
			fullscreenBtn.style.top = "5px";
			fullscreenBtn.style.right = "5px";
			fullscreenBtn.classList.add("mapillary-viewer-btn");

			resDiv.style.position = "relative";
			resDiv.appendChild(mlyDiv);
			resDiv.appendChild(fullscreenBtn);
		}
		else {
			resDiv.innerHTML = "<ul>"+Object.entries(p).map(e => "<li>"+e.join(" : ")+"</li>").join("")+"</ul>";
		}

		return resDiv;
	}
