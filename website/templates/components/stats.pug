//- Synthetic stats
div.row.mb-4#stats-blocks
	div.col.text-center
		div.spinner-border.text-primary(role="status" style="width: 64px; height: 64px")

div.row
	//- Leaderboard
	div.col-12.mb-4
		h3= __("Podium")
		p#stats-leaderboard-noauth.text-center
			| #{__("Inscrivez-vous ou connectez-vous pour voir le podium")}
			br.mb-2
			+user_connect
		div#stats-leaderboard-container.d-none.row.align-items-center
			div#stats-podium.col-md-7.row.justify-content-start.align-items-end.no-gutters.mb-3.mb-md-0
			div.overflow-auto.col-md-5.px-0(style="max-height: 300px")
				table.table.table-sm
					thead.sticky-top.thead-light
						tr
							th(scope="col") #
							th(scope="col")= __("Pseudo")
							th(scope="col").text-right.pr-2= __("Points")
					tbody#stats-leaderboard

	//- Count per admin boundary
	div.col-12.mb-2
		h3= __("Contributions par zone")
		div#map-stats-legend.row.mb-2
		div#map-stats.pdm-loading

	//- Charts
	div.col-12.mb-2#stats-chart-container
		h3= __("Avancement")
		div.spinner-charts.spinner-border.text-primary(role="status" style="width: 64px; height: 64px")
		canvas#stats-chart.w-100(height="300")

	div.col-lg-6.mb-2#stats-chart-notes-container
		h3= __("Notes")
		div.spinner-charts.spinner-border.text-primary(role="status" style="width: 64px; height: 64px")
		canvas#stats-chart-notes.w-100(height="300")

	div.col-lg-6.mb-2#stats-chart-keys-container
		h3= __("Clés fréquentes")
		div.spinner-charts.spinner-border.text-primary(role="status" style="width: 64px; height: 64px")
		canvas#stats-chart-keys.w-100(height="300")

script.
	const projectDays = !{JSON.stringify(days)};
	function showStatistics() {
		const numberFormat = new Intl.NumberFormat();

		fetch("/projects/#{id}/stats"+(window.osm_user ? "?osm_user="+window.osm_user.name : ""))
		.then(res => res.json())
		.then(res => {
			const blocks = document.getElementById("stats-blocks");
			blocks.innerHTML = '';
			const addBlock = (title, subtitle) => {
				const b = document.createElement("div");
				b.classList.add("col-md-4", "mb-2");

				const sb = document.createElement("div");
				sb.classList.add("p-4", "no-gutters", "border", "rounded", "overflow-hidden", "flex-md-row", "shadow-sm", "position-relative", "h-100");
				b.appendChild(sb);

				const t = document.createElement("h3");
				t.classList.add("mb-0");
				t.appendChild(document.createTextNode(title));
				sb.appendChild(t);

				const st = document.createElement("p");
				st.classList.add("card-text", "mb-auto");
				st.appendChild(document.createTextNode(subtitle));
				sb.appendChild(st);

				blocks.appendChild(b);
			};

			// Blocks for small stats
			if(res.added) { addBlock(numberFormat.format(res.added), "#{title.toLowerCase()} ajoutés"); }
			if(res.count) { addBlock(numberFormat.format(res.count), "#{title.toLowerCase()} au total dans OSM"); }
			if(res.tasksSolved !== undefined) { addBlock(numberFormat.format(res.tasksSolved), "#{statistics.osmose_tasks}"); }
			addBlock(numberFormat.format(res.nbContributors), "#{__("personnes ayant contribué")}");

			// Leaderboard
			if(res.leaderboard && res.leaderboard.length > 0) {
				let wordCloud = [];
				document.getElementById("stats-leaderboard-container").classList.remove("d-none");
				document.getElementById("stats-leaderboard-noauth").classList.add("d-none");

				const leaderboardBody = document.getElementById("stats-leaderboard");
				leaderboardBody.innerHTML = '';
				const podium = document.getElementById("stats-podium");
				podium.innerHTML = '';

				const podiumStyle = [ [125, "#F9A825"], [100, "#1E88E5"], [75, "#42A5F5"], [50, "#90CAF9"] ];

				res.leaderboard.map((lb,i) => {
					const tr = document.createElement("tr");

					const td1 = document.createElement("td");
					td1.setAttribute("scope", "row");
					td1.appendChild(document.createTextNode(lb.pos));
					td1.classList.add("align-middle");
					tr.appendChild(td1);

					const td2 = document.createElement("td");
					const td2Link = document.createElement("a");
					td2Link.href=`/users/${encodeURIComponent(lb.username)}`;
					td2Link.appendChild(document.createTextNode(lb.username));
					td2.appendChild(td2Link);
					td2.classList.add("align-middle");
					tr.appendChild(td2);

					const td3 = document.createElement("td");
					td3.appendChild(document.createTextNode(numberFormat.format(lb.amount)));
					td3.classList.add("align-middle", "text-right", "pr-2");
					tr.appendChild(td3);

					// Add to podium
					if(i < 3 || lb.userid === window.osm_user.id) {
						const podiumStep = document.createElement("div");
						podiumStep.classList.add("col", "text-center");
						podiumStep.style.transition = "opacity 1s";
						podiumStep.style.opacity = "0";
						setTimeout(() => podiumStep.style.opacity = "1", 1000*Math.min(i, 3));

						const imgLink = document.createElement("a");
						imgLink.href = td2Link.href;
						podiumStep.appendChild(imgLink);

						const imgDefault = document.createElement("img");
						imgDefault.classList.add("img-thumbnail", "mb-1");
						imgDefault.src = "/images/badges/contributed.mini.svg";
						imgDefault.style.maxWidth = "60px";
						imgDefault.style.maxHeight = "60px";
						imgLink.appendChild(imgDefault);

						// Try to load a custom user pic if any
						const imgCustom = document.createElement("img");
						imgCustom.classList.add("img-thumbnail", "mb-1", "d-none");
						imgCustom.style.maxWidth = "60px";
						imgCustom.style.maxHeight = "60px";
						imgLink.appendChild(imgCustom);

						osmApi.fetchUser(lb.userid).then(details => {
							if(details.img && details.img.href) {
								imgCustom.src = details.img.href;
								imgCustom.addEventListener("load", e => {
									imgCustom.classList.remove("d-none");
									imgDefault.classList.add("d-none");
								});
							}
						});

						const divStep = document.createElement("div");
						divStep.classList.add("text-truncate");
						divStep.style.height = `${i < 3 ? podiumStyle[i][0] : podiumStyle[3][0]}px`;
						divStep.style.backgroundColor = i < 3 ? podiumStyle[i][1] : podiumStyle[3][1];
						divStep.style.lineHeight = "1.4rem";
						divStep.appendChild(document.createTextNode(lb.pos));
						divStep.appendChild(document.createElement("br"));
						divStep.appendChild(td2Link.cloneNode(true));
						divStep.lastChild.classList.add("text-decoration-none", "text-body");
						podiumStep.appendChild(divStep);

						podium.appendChild(podiumStep);
					}

					// Set-up word cloud if any
					if(#{isRecentPast || "false"}) {
						wordCloud.push([lb.username, 10]);
					}

					return tr;
				})
				.forEach(d => leaderboardBody.appendChild(d));

				if(#{isRecentPast || "false"}) {
					const wordCloudDom = document.getElementById("word-cloud");
					wordCloudDom.classList.remove("d-none");
					wordCloud.unshift(["Merci !", 50]);
					createWordCloud(wordCloudDom, wordCloud);
				}
			}
			else if(res.leaderboard && res.leaderboard.length === 0) {
				document.getElementById("stats-leaderboard-container").classList.add("d-none");
				document.getElementById("stats-leaderboard-noauth").classList.add("d-none");
			}
			else {
				document.getElementById("stats-leaderboard-container").classList.add("d-none");
				document.getElementById("stats-leaderboard-noauth").classList.remove("d-none");
			}

			const yAxeLinear = {
				ticks: {
					callback: (value, index, values) => numberFormat.format(Number(value.toString())),
					precision: 0
				}
			};
			const yAxeLogarithmic = {
				type: 'logarithmic',
				ticks: {
					callback: (value, index, values) => numberFormat.format(Number(value.toString()))
				},
				afterBuildTicks: (chartObj) => {
					const last = chartObj.ticks.pop() || 0;
					chartObj.ticks = [0, 1, 10, 100, 1000, 10000, 100000, 1000000].filter(v => v >= last);
					if(chartObj.ticks[0] > last) { chartObj.ticks.unshift(last); }
				}
			};

			for(let scd of document.querySelectorAll(".spinner-charts")) {
				scd.classList.add("d-none");
			}

			// Notes count + chart
			if(res.chartNotes) {
				addBlock(numberFormat.format(res.openedNotes), `notes ouvertes (${res.statClosedNotes} résolues)`);

				const myChart = new Chart(document.getElementById("stats-chart-notes").getContext("2d"), {
					type: "line",
					data: {
						datasets: res.chartNotes
					},
					options: {
						responsive: true,
						scales: {
							xAxes: [{
								type: 'time',
								bounds: 'ticks',
								time: {
									tooltipFormat: "DD/MM",
									displayFormats: { day: "DD/MM" },
									round: "day",
									unit: "day"
								}
							}],
							yAxes: [ yAxeLinear ]
						}
					}
				});
			}
			else {
				document.getElementById("stats-chart-notes-container").classList.add("d-none");
			}

			// Evolution chart
			const ctx = document.getElementById("stats-chart").getContext("2d");
			const myChart = new Chart(ctx, {
				type: "line",
				data: {
					datasets: res.chart
				},
				options: {
					responsive: true,
					scales: {
						xAxes: [{
							type: 'time',
							bounds: 'ticks',
							time: {
								tooltipFormat: "DD/MM",
								displayFormats: { day: "DD/MM" },
								round: "day",
								unit: "day"
							}
						}],
						yAxes: [ res.pctTasksDone === undefined || parseInt(res.pctTasksDone) >= 30 ? yAxeLinear : yAxeLogarithmic ]
					}
				}
			});

			// Keys chart
			if(res.chartKeys) {
				document.getElementById("stats-chart-keys-container").classList.remove("d-none");
				const ctx2 = document.getElementById("stats-chart-keys").getContext("2d");
				const myChart2 = new Chart(ctx2, {
					type: "bar",
					data: res.chartKeys,
					options: {
						responsive: true,
						scales: {
							xAxes: [{
								ticks: { callback: (value, index, values) => value.length > 15 ? value.slice(0, 12)+"..." : value }
							}],
							yAxes: [ yAxeLinear ]
						}
					}
				});
			}
			else {
				document.getElementById("stats-chart-keys-container").classList.add("d-none");
			}

			// Boundary stats map
			const mapStatsContainer = document.getElementById("map-stats");
			mapStatsContainer.classList.remove("pdm-loading");

			if(res.mapStyle) {
				const isMobile = window.innerWidth < 576;
				const mapStats = new maplibregl.Map({
					container: 'map-stats',
					pitchWithRotate: false,
					dragRotate: false,
					center: [2.5, 46.0],
					zoom: 4,
					style: res.mapStyle.style,
					minZoom: 4,
					maxZoom: 10
				});

				const basePopupSize = isMobile ? 250 : 400;
				const popupHover = new maplibregl.Popup({ closeButton: false, closeOnClick: false, anchor: "left" });
				const popupClick = new maplibregl.Popup({ closeOnClick: false, className: 'map-stats-popup', maxWidth: basePopupSize+'px' });
				const fsctrl = new maplibregl.FullscreenControl();

				if(isMobile) {
					const interactions = ["scrollZoom", "dragPan", "doubleClickZoom", "touchZoomRotate"];
					interactions.forEach(it => mapStats[it].disable());

					const fsctrl = new maplibregl.FullscreenControl();
					window.addEventListener(fsctrl._fullscreenchange, () => {
						if(fsctrl._isFullscreen()) {
							interactions.forEach(it => mapStats[it].enable());
						}
						else {
							interactions.forEach(it => mapStats[it].disable());
						}
					});
					mapStats.addControl(fsctrl);
				}

				mapStats.on("click", "stats_0", e => {
					const f = e.features.pop();

					if(f) {
						mapStats.getCanvas().style.cursor = 'pointer';
						const coords = f.geometry.coordinates.slice();

						while (Math.abs(e.lngLat.lng - coords[0]) > 180) {
							coords[0] += e.lngLat.lng > coords[0] ? 360 : -360;
						}

						const div = document.createElement("div");
						div.style.height = (basePopupSize/2)+"px";
						div.style.width = (basePopupSize+20)+"px";
						const canvas = document.createElement("canvas");
						canvas.style.maxWidth = (basePopupSize-20)+"px";
						canvas.style.maxHeight = (basePopupSize/2)+"px";

						const fStats = JSON.parse(f.properties.stats);
						const myChart = new Chart(canvas.getContext("2d"), {
							type: "line",
							data: {
								datasets: [{
									label: "#{__("Nombre total")}",
									data: projectDays.map(d => ({ t: d, y: fStats[d] || 0 })).filter((d,i) => d.y != 0 || i < projectDays.length - 1),
									fill: false,
									borderColor: "#388E3C",
									lineTension: 0
								}]
							},
							options: {
								responsive: true,
								scales: {
									xAxes: [{
										type: 'time',
										bounds: 'ticks',
										time: {
											tooltipFormat: "DD/MM",
											displayFormats: { day: "DD/MM" },
											round: "day",
											unit: "day"
										}
									}],
									yAxes: [ yAxeLinear ]
								}
							}
						});

						div.appendChild(document.createTextNode(f.properties.name));
						div.appendChild(canvas);

						popupHover.remove();
						popupClick.setLngLat(coords).setDOMContent(div).addTo(mapStats);
					}
				});

				mapStats.on("mousemove", "stats_0", e => {
					if(isMobile) { return; }
					const f = e.features.pop();

					if(f) {
						mapStats.getCanvas().style.cursor = 'pointer';
						const coords = f.geometry.coordinates.slice();

						while (Math.abs(e.lngLat.lng - coords[0]) > 180) {
							coords[0] += e.lngLat.lng > coords[0] ? 360 : -360;
						}

						const div = document.createElement("div");
						div.appendChild(document.createTextNode(`${f.properties.name} : ${f.properties.nb}`));
						popupHover.setLngLat(coords).setDOMContent(div).addTo(mapStats);
					}
				});

				mapStats.on("mouseleave", "stats_0", () => {
					mapStats.getCanvas().style.cursor = '';
					popupHover.remove();
				});

				// Boundary stats legends
				const mapStatsLegend = document.getElementById("map-stats-legend");
				mapStatsLegend.innerHTML = '';
				const admLvlToText = { "4": "#{__("Région")}", "6": "#{__("Département")}", "8": "#{__("Commune")}" };
				Object.entries(res.mapStyle.legend).forEach(e => {
					const [lvl, data] = e;

					const div = document.createElement("div");
					div.classList.add("col-md-4", "d-flex", "justify-content-start", "align-items-center");
					const symbol1 = document.createElement("div");
					symbol1.classList.add("map-stats-symbol");
					symbol1.style.width = `${Math.ceil(data.minSize*1.5)}px`;
					symbol1.style.height = `${Math.ceil(data.minSize*1.5)}px`;
					symbol1.style.borderRadius = `${Math.ceil(data.minSize*1.5/2)}px`;
					symbol1.style.backgroundColor = data.color;

					const symbol2 = symbol1.cloneNode(true);
					symbol2.style.width = `${Math.ceil(data.maxSize*1.5)}px`;
					symbol2.style.height = `${Math.ceil(data.maxSize*1.5)}px`;
					symbol2.style.borderRadius = `${Math.ceil(data.maxSize*1.5/2)}px`;

					div.appendChild(document.createTextNode(`${admLvlToText[lvl]} : ${data.minValue}`));
					div.appendChild(symbol1);
					div.appendChild(symbol2);
					div.appendChild(document.createTextNode(data.maxValue));
					mapStatsLegend.appendChild(div);
				});
			}
			else {
				mapStatsContainer.parentNode.classList.add("d-none");
			}
		});
	}

	let delayDisplayStats;
	const timerShowStats = () => {
		if(delayDisplayStats) { clearTimeout(delayDisplayStats); }
		delayDisplayStats = setTimeout(showStatistics, 1000);
	};

	window.addEventListener("osm_login", () => {
		timerShowStats();
	});

	window.addEventListener("osm_logout", () => {
		document.getElementById("stats-leaderboard-container").classList.add("d-none");
		document.getElementById("stats-leaderboard-noauth").classList.remove("d-none");
	});

	timerShowStats();
